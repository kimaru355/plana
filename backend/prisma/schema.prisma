generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @unique
  email         String          @unique
  name          String
  phoneNumber   String          @unique
  country       String
  password      String
  isDeactivated Boolean         @default(false)
  Ticket        Ticket[]
  Review        Review[]
  DeletedReview DeletedReview[]
}

model Organizer {
  id            String         @id @unique
  name          String
  email         String         @unique
  phoneNumber   String         @unique
  country       String
  password      String
  isDeactivated Boolean        @default(false)
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  Event         Event[]
  EventTicket   EventTicket[]
  DeletedEvent  DeletedEvent[]
}

model Admin {
  id            String          @id @unique
  name          String
  email         String          @unique
  phoneNumber   String          @unique
  country       String
  password      String
  isDeactivated Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  EventCategory EventCategory[]
}

model Event {
  id          String        @id @unique
  title       String
  description String        @db.VarChar(8000)
  startTime   DateTime
  endTime     DateTime
  country     String
  city        String
  location    String
  capacity    Int
  images      String        @db.VarChar(MAX)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  organizerId String
  categoryId  String
  organizer   Organizer     @relation(fields: [organizerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  category    EventCategory @relation(fields: [categoryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  EventTicket EventTicket[]
  Ticket      Ticket[]
}

model DeletedEvent {
  id          String        @id @unique
  title       String
  description String        @db.VarChar(8000)
  startTime   DateTime
  endTime     DateTime
  country     String
  city        String
  location    String
  capacity    Int
  images      String        @db.VarChar(MAX)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  organizerId String
  categoryId  String
  organizer   Organizer     @relation(fields: [organizerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  category    EventCategory @relation(fields: [categoryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  EventTicket EventTicket[]
  Ticket      Ticket[]
}

model EventCategory {
  id           String         @id @unique
  name         String
  imageUrl     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  adminId      String
  admin        Admin          @relation(fields: [adminId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Event        Event[]
  DeletedEvent DeletedEvent[]
}

model EventTicket {
  id             String        @id @unique
  name           String
  type           String
  price          Float
  persons        Int
  quantity       Int
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  eventId        String
  organizerId    String
  deletedEventId String?
  event          Event         @relation(fields: [eventId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  organizer      Organizer     @relation(fields: [organizerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  DeletedEvent   DeletedEvent? @relation(fields: [deletedEventId], references: [id])
  Ticket         Ticket[]
}

model Ticket {
  id             String          @id @unique
  names          String
  quantity       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  eventTicketId  String
  eventId        String
  userId         String
  deletedEventId String?
  event          Event           @relation(fields: [eventId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  eventTicket    EventTicket     @relation(fields: [eventTicketId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user           User            @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  DeletedEvent   DeletedEvent?   @relation(fields: [deletedEventId], references: [id])
  Review         Review[]
  DeletedReview  DeletedReview[]
}

model Review {
  id          String   @id @unique
  rating      Int
  comment     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String
  ticketId    String
  user        User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model DeletedReview {
  id          String   @id @unique
  rating      Int
  comment     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String
  ticketId    String
  user        User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}
